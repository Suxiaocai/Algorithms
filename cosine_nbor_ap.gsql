*ATTR**SUB* CREATE QUERY cosine_nbor_ap_sub*EXT* (VERTEX<*vertex-types*> source, INT topK) FOR GRAPH *graph* {
*ACCM**SUB* CREATE QUERY cosine_nbor_ap_sub*EXT* (VERTEX source) FOR GRAPH *graph* RETURNS (MapAccum<VERTEX, FLOAT>){
*FILE**SUB* CREATE QUERY cosine_nbor_ap_sub*EXT* (VERTEX source) FOR GRAPH *graph* RETURNS (MapAccum<VERTEX, FLOAT>){
/* This subquery calculates the Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
*/

*ACCM*  MapAccum<VERTEX, FLOAT> @@result;
*FILE*  MapAccum<VERTEX, FLOAT> @@result;
        SumAccum<FLOAT> @numerator, @@norm1, @norm2;
*ATTR*  SumAccum<FLOAT> @cosine;

        start1 = {source};
        subjects = SELECT t
                   FROM start1:s -(*edge-types*:e)-> :t
                   ACCUM t.@numerator = e.*edge-weight*,
                         @@norm1 += pow(e.*edge-weight*, 2);

        neighbours = SELECT t
                     FROM subjects:s -(*sec-edge-types*:e)-> *vertex-types*:t
                     WHERE t != source and getvid(source) < getvid(t)
                     ACCUM t.@numerator += s.@numerator * e.*edge-weight*;

        neighbours = SELECT s
                     FROM neighbours:s -(*edge-types*:e)-> :t
                     ACCUM s.@norm2 += pow(e.*edge-weight*, 2)
*ATTR*               POST-ACCUM s.@cosine = s.@numerator/sqrt(@@norm1 * s.@norm2)
*ATTR*               ORDER BY s.@cosine DESC
*ATTR*               LIMIT topK
*ACCM*               POST-ACCUM @@result += (s -> s.@numerator/sqrt(@@norm1 * s.@norm2))
*FILE*               POST-ACCUM @@result += (s -> s.@numerator/sqrt(@@norm1 * s.@norm2))
                 ;
*ATTR*  neighbours = SELECT s
*ATTR*               FROM neighbours:s
*ATTR*               POST-ACCUM insert into *insert-edge-name* values(source, s, s.@cosine);

*ACCM*  RETURN @@result;
*FILE*  RETURN @@result;
}


*ATTR*CREATE QUERY cosine_nbor_ap*EXT* (INT topK) FOR GRAPH *graph* {
*ACCM*CREATE QUERY cosine_nbor_ap*EXT* (INT topK) FOR GRAPH *graph*{
*FILE*CREATE QUERY cosine_nbor_ap*EXT* (INT topK, STRING filepath) FOR GRAPH *graph*{
/* This query calls the subquery cosine_nbor_ap_sub*EXT* to get the similarity score of every pair of vertices.
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute.
   A similarity edge with one FLOAT attribute in the schema is required for this version.
*/
*ACCM*  TYPEDEF tuple<VERTEX vertex1, VERTEX vertex2, FLOAT score> SIMILARITY_SCORE;
*FILE*  TYPEDEF tuple<VERTEX vertex1, VERTEX vertex2, FLOAT score> SIMILARITY_SCORE;
*FILE*  FILE f(filepath);
*ACCM*  MapAccum<VERTEX, FLOAT> @single_result;
*FILE*  MapAccum<VERTEX, FLOAT> @single_result;
*ACCM*  HeapAccum<SIMILARITY_SCORE>(topK, score DESC) @@total_result;
*FILE*  HeapAccum<SIMILARITY_SCORE>(topK, score DESC) @@total_result;

        start = {*vertex-types*.*};
        start = SELECT s
                FROM start:s
*ATTR*          ACCUM cosine_nbor_ap_sub*EXT* (s, topK)
*ACCM*          ACCUM s.@single_result = cosine_nbor_ap_sub*EXT* (s)
*FILE*          ACCUM s.@single_result = cosine_nbor_ap_sub*EXT* (s)
*ACCM*          POST-ACCUM
*ACCM*                  FOREACH (key, value) IN s.@single_result DO
*ACCM*                          @@total_result += SIMILARITY_SCORE(s, key, value)
*ACCM*                  END
*FILE*          POST-ACCUM
*FILE*                  FOREACH (key, value) IN s.@single_result DO
*FILE*                          @@total_result += SIMILARITY_SCORE(s, key, value)
*FILE*                  END
            ;

*ACCM*  PRINT @@total_result;
*FILE*  f.println("Vertex1","Vertex2","Similarity");
*FILE*  FOREACH item IN @@total_result DO
*FILE*          f.println(item.vertex1, item.vertex2, item.score);
*FILE*  END;

}
