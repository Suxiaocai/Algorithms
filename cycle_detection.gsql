CREATE QUERY cycle_detection() FOR GRAPH social { 
# https://en.wikipedia.org/wiki/Rocha%E2%80%93Thatte_cycle_detection_algorithm

	TYPEDEF TUPLE <VERTEX personV, INT uid> p;
  ListAccum<ListAccum<p>> @currList, @newList, @@cycles;
	OrAccum @deactivate;
	SumAccum<INT> @uid;
	
	Active = {person.*};
	Active = SELECT s 
	         FROM Active:s
	         ACCUM s.@uid = getvid(s)
	         POST-ACCUM s.@currList = [[p(s, s.@uid), p(s, s.@uid)]];  # use the first one in the list to store the minimal
	
	WHILE Active.size() > 0 DO 
	    Active = SELECT t 
	             FROM Active:s -(friendship:e)-> :t
	             ACCUM   
	                   int i = 0,
	                   FOREACH l IN s.@currList DO 
	                       IF t == l.get(1).personV THEN # find cycle
	                               IF t == l.get(0).personV THEN  # if it is the mininal in the list, report 
	                                   @@cycles += l 
	                               END
	                       ELSE IF l.contains(p(t, t.@uid)) == FALSE THEN   # do not add into list if already had cycle
	                              t.@newList += [l + [p(t, t.@uid)]]   # update another list to avoid confliction
	                           END
	                       END
	              POST-ACCUM FOREACH l IN t.@newList DO
	                             IF t.@uid < l.get(0).uid THEN
	                                 l.update(0, p(t, t.@uid))
	                             END
	                         END,
	                         s.@currList.clear(),
	                         t.@currList = t.@newList,
	                         t.@newList.clear()
	              HAVING t.@currList.size() > 0;  # IF receive no INFO, deactivate it;
	END;
	PRINT @@cycles;   # ignore the first node in each list. Can be revised if needed 
}
